<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">

	<!-- 连接池配置文件 -->
	<context:property-placeholder location="classpath:config/config.properties" />
	
	<!-- base dataSource -->
	<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="filters" value="stat" />
		<property name="maxActive" value="100" />
		<property name="initialSize" value="5" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="10" />
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>

	<!-- 主数据源 -->
	<bean id="dataSource"  parent="baseDataSource" init-method="init">
		<property name="driverClassName" value="${master.driver}" />
		<property name="url" value="${master.url}" />
		<property name="username" value="${master.username}" />
		<property name="password" value="${master.password}" />
	</bean>

	<!-- 多数据源 -->
	<!--<bean id="otherSource"  parent="baseDataSource" init-method="init">
		<property name="driverClassName" value="${other.driver}" />
		<property name="url" value="${other.url}" />
		<property name="username" value="${other.username}" />
		<property name="password" value="${other.password}" />
	</bean>-->

	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
    <!-- 如果 "proxy-target-class" 属值被设置为 "true"，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 "proxy-target-class" 属值被设置为 "false" 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。 -->
    <!-- 启用CGliB -->
    <!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->


	<!-- 主数据库事务配置  -->
	
    <!-- 事务管理配置 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 拦截器方式 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="change*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="eidt*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="saveOrUpdate*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="grant*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="RuntimeException" />
			<!-- <tx:method name="*" propagation="REQUIRED" /> -->
		</tx:attributes>
	</tx:advice>

	
	<!-- AOP 配置 -->
	<aop:config>
		<!-- 第一个*代表所有的返回值类型；第二个*代表所有的类；第三个*代表类所有方法；..代表子或者孙子包；最后一个..代表所有的参数 -->
		<aop:pointcut id="serviceMethods" expression="execution(* com.*.*..service.*.*(..))" />
		<aop:advisor id="txAdvisor" pointcut-ref="serviceMethods" advice-ref="txAdvice" order="1" />
	</aop:config>

</beans>