package com.rrgy.sms.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.rrgy.common.util.SmsUtil;
import com.rrgy.core.base.service.BaseService;
import com.rrgy.core.constant.Const;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.kit.DateTimeKit;
import com.rrgy.core.toolbox.kit.PropKit;
import com.rrgy.core.toolbox.kit.RandomKit;
import com.rrgy.sms.model.Sms;
import com.rrgy.sms.service.SmsService;

/**
 * Generated by Blade.
 * 2017-01-04 16:31:00
 */
@Service
public class SmsServiceImpl extends BaseService<Sms> implements SmsService{
	
	public boolean findValidSms(Object mobile,Object code){
		Blade blade = Blade.create(Sms.class);
		Integer sms_time = PropKit.use(Const.PROPERTY_FILE).getInt("sms_time");
		String sqlTemplate = "SELECT * from dt_code where TIMESTAMPDIFF(MINUTE, add_time, CURRENT_TIMESTAMP()) < "
				+ sms_time + " and mobile=#{mobile} and code=#{code} and isuse = #{isuse}";
		Paras paras = Paras.create().set("mobile", mobile).set("code", code).set("isuse", 0);
		return blade.isExist(sqlTemplate, paras);
	}

	@Override
	public void updateSms(String mobile) {
		Md.update("smsCode.update", Paras.create().set("isuse", 1).set("mobile", mobile));
	}

	@Override
	public Map<String, Object> sendCode(String mobile) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String random = RandomKit.randomString("0123456789", 6);
//		System.out.println(random);
		Integer sms_time = PropKit.use(Const.PROPERTY_FILE).getInt("sms_time");
		String sms_param = "{\"code\":\""+random+"\",\"time\":\""+sms_time+"\"}";
		SendSmsResponse response = SmsUtil.sendT("123456", "normal", sms_param, mobile);
		if(response==null||response.getCode() == null){
			returnMap.put("code", 1);
			returnMap.put("msg", "发送失败");
			return returnMap;
		}
		
		if(response.getCode() != null && !response.getCode().equals("OK")) {
			returnMap.put("code", 1);
			returnMap.put("msg", response.getMessage());
			return returnMap;

		}
		
		if(response.getCode() != null && response.getCode().equals("OK")){
			Blade smsBlade = Blade.create(Sms.class);
			Sms sms = (Sms) smsBlade.findFirstBy(" mobile = #{mobile}", Paras.create().set("mobile", mobile));
			if(null != sms){
				sms.setAdd_time(DateTimeKit.date());
				sms.setCode(random);
				sms.setIsuse("0");
				smsBlade.update(sms);
			}else{
				sms = new Sms();
				sms.setCode(random);
				sms.setMobile(mobile);
				sms.setIsuse("0");
				sms.setAdd_time(DateTimeKit.date());
				smsBlade.save(sms);
			}
			returnMap.put("code", 0);
		}else{
			returnMap.put("code", -1);
		}
		
		return returnMap;
	}


}
