package com.rrgy.payment.controller;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.lfgj.clinet.pay.payment.PayInfo;
import com.lfgj.clinet.pay.payment.utils.PayUtil;
import com.lfgj.clinet.payHqf.PrePayHqfClient;
import com.lfgj.financial.service.PayInfoService;
import com.lfgj.member.model.Member;
import com.lfgj.member.service.MemberService;
import com.lfgj.util.CommKit;
import com.lfgj.util.LfConstant;
import com.rrgy.common.base.BaseController;
import com.rrgy.common.iface.ResultVo;
import com.rrgy.core.constant.ConstConfig;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.toolbox.Func;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.AESKit;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.LogKit;
import com.rrgy.core.toolbox.kit.StrKit;

/**
 * Generated by Blade. 2017-01-04 13:26:54
 */
@Controller
@RequestMapping("/payment")
public class PaymentController extends BaseController {
	private static String CODE = "payment";
	private static String BASE_PATH = "/payment/";
	@Autowired
	MemberService service;
	@Autowired
	PayInfoService payInfoService;

	@RequestMapping("")
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "login.html";
	}

	@RequestMapping("/{person_id}")
	public String pay(@PathVariable String person_id, ModelMap mm) {
		mm.put("code", CODE);

		if (Func.isEmpty(person_id)) {
			mm.put("code", 1);
			mm.put("msg", "会员不存在");
			return BASE_PATH + "pay.html";
		} else {
			// 解密店铺id
			try{
				person_id = AESKit.decrypt(person_id);
			}catch(Exception ex){
				mm.put("code", 1);
				mm.put("msg", "会员不存在");
				return BASE_PATH + "pay.html";
			}
		}
		
		if (Func.isEmpty(person_id)) {
			mm.put("code", 1);
			mm.put("msg", "会员不存在");
			return BASE_PATH + "pay.html";
		}
		
		payInfoService.editStatus(Integer.valueOf(person_id));
		
		Member person = Blade.create(Member.class).findById(person_id);
		if (person==null) {
			mm.put("code", 1);
			mm.put("msg", "会员不存在");
			return BASE_PATH + "pay.html";
		}
		
		String crypt_id = AESKit.encrypt(person.getId().toString());
		person.setCrypt_id(crypt_id);
		
		mm.put("code", 0);
		mm.put("msg", "");
		mm.put("person", person);
		return BASE_PATH + "pay.html";
	}
	
	@RequestMapping("/toPay")
	public String toPay(ModelMap mm) throws Exception {
		String person_id = getParameter("person_id");
        String payWay = getParameter("payWay");

		if (StrKit.isEmpty(person_id)) {
			LogKit.info("=============没有找到商户号,请确认付款码是否有误===============");
			mm.put("code", 1);
			mm.put("msg", "会员不存在");
			return BASE_PATH + "pay.html";
		}
		
		person_id = AESKit.decrypt(person_id);
		Member person = Blade.create(Member.class).findById(person_id);
		
		String pay_type = "7"; // 环球付
		String money = getParameter("total_fee");
		
		if(Float.valueOf(money) <= 0){
			mm.put("code", 1);
			mm.put("msg", "金额应大于0！");
			return BASE_PATH + "pay.html";
		}
		
		String orderNo = Func.orderNo("P");
		
		PayInfo payInfo = new PayInfo();
		payInfo.setAmount(money);
		payInfo.setOrdernumber(orderNo);
		payInfo.setCreate_time(new Date());
		payInfo.setUser_id(Integer.valueOf(person_id));
		payInfo.setReal_name(person.getReal_name());
		payInfo.setMobile(person.getMobile());
		payInfo.setPay_acount(person.getBank_acount());
		payInfo.setPay_type(pay_type);
		payInfo.setPay_type_name(LfConstant.PAY_TYPE.get(pay_type));
		payInfo.setRespcode("0"); // 未提交
		payInfo.setRespname(LfConstant.PAY_RESPCODE.get("0"));
		
		boolean rs = Blade.create(PayInfo.class).save(payInfo);
		if(!rs){
			mm.put("code", 1);
			mm.put("msg", "保存支付订单出错!");
			return BASE_PATH + "pay.html";
		}
		PrePayHqfClient pp = new PrePayHqfClient();
		ResultVo payRs = pp.getPayUrl(money, orderNo);
		
		if("0".equals(payRs.getReturnCode())){
			mm.put("code", 0);
			Map<String,Object> data = (Map<String,Object>)payRs.getReturnParams();
			
			mm.put("gateway_new", data.get("pay_url"));
			data.remove("pay_url");
			mm.put("data", data);
			return BASE_PATH + "shanpay.html";
		}else{
			mm.put("code", 1);
			mm.put("code", payRs.getMessage());
			return BASE_PATH + "pay.html";
		}
	}

	/*@ResponseBody
	@RequestMapping("/toPay")
	public AjaxResult toPay(ModelMap mm) throws Exception {

		LogKit.info("===============开始付款===============");
		String person_id = getParameter("person_id");

		if (StrKit.isEmpty(person_id)) {
			LogKit.info("=============没有找到商户号,请确认付款码是否有误===============");
			return error("会员不存在");
		}

		person_id = AESKit.decrypt(person_id);
		Member person = Blade.create(Member.class).findById(person_id);

		String payWay = getParameter("payWay");
		String remark = getParameter("remark");
		String total_fee = getParameter("total_fee");

		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("amount", new BigDecimal(total_fee).multiply(new BigDecimal(100)).intValue());
		String orderNo = Func.orderNo("P");
		dataMap.put("payordernumber", orderNo);
		String domain = ConstConfig.pool.get("config.domain");
		String fonturl = domain + "/payfront/result";
		String backurl = domain + "/clientService?serviceId=lf_pay/callback&iscrypt=2";
		dataMap.put("fronturl", fonturl);
		dataMap.put("backurl", backurl);
		dataMap.put("Body", "聚宝资讯通");
		Map<String, Object> extraParams = new HashMap<String, Object>();
		extraParams.put("person_id", person_id);
		extraParams.put("payWay", payWay);
		extraParams.put("remark", remark);
		String extraParamsJson = JsonKit.toJson(extraParams);

		dataMap.put("ExtraParams", extraParamsJson);
		dataMap.put("PayType", payWay);
		if ("0".equals(payWay)) {
			payWay = "5";
			dataMap.put("SubpayType", "01");
		} else if ("1".equals(payWay)) {
			dataMap.put("SubpayType", "10");
		} else if ("2".equals(payWay)) {
			dataMap.put("SubpayType", "10");
		}

		PayInfo payInfo = new PayInfo();
		payInfo.setAmount(total_fee);
		payInfo.setOrdernumber(orderNo);
		payInfo.setCreate_time(new Date());
		payInfo.setUser_id(Integer.valueOf(person_id));
		payInfo.setReal_name(person.getReal_name());
		payInfo.setMobile(person.getMobile());
		payInfo.setPay_acount(person.getBank_acount());
		payInfo.setPay_type(payWay);
		payInfo.setPay_type_name(LfConstant.PAY_TYPE.get(payWay));
		payInfo.setRespcode("0"); // 未提交
		payInfo.setRespname(LfConstant.PAY_RESPCODE.get("0"));

		boolean rs = Blade.create(PayInfo.class).save(payInfo);
		if (!rs) {
			return success("保存支付信息出错!");
		}

		String appid = CommKit.getParameter("300").getPara();
		String key = CommKit.getParameter("301").getPara();
		String session = CommKit.getParameter("302").getPara();

		System.out.println(JsonKit.toJson(dataMap));
		String result = PayUtil.Invoke("masget.pay.compay.router.font.pay", appid, key, session, dataMap);

		System.out.println("result:" + result);

		JSONObject jsonob = JSONObject.parseObject(result);
		String ret = jsonob.getString("ret");
		if ("0".equals(ret)) {
			String path = jsonob.getString("data");
			return json(path);
		} else {
			String message = jsonob.getString("message");
			return error(message);
		}
	}*/
}
