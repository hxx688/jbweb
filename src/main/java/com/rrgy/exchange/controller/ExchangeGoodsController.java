package com.rrgy.exchange.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rrgy.common.base.BaseController;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.DateKit;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.RandomKit;
import com.rrgy.core.toolbox.kit.StrKit;
import com.rrgy.core.toolbox.kit.URLKit;
import com.rrgy.exchange.intercept.GoodsIntercept;
import com.rrgy.exchange.model.ExchangeGoods;
import com.rrgy.exchange.service.ExchangeGoodsService;

/**
 * 商品管理
 * Generated by Blade.
 * 2017-03-09 13:54:49
 */
@Controller
@RequestMapping("/goods")
public class ExchangeGoodsController extends BaseController {
	private static String CODE = "goods";
	private static String PREFIX = "exchange_goods";
	private static String LIST_SOURCE = "exchangeGoods.list";
	private static String BASE_PATH = "/exchange/goods/";
	
	@Autowired
	ExchangeGoodsService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "exchangeGoods.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "exchangeGoods_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		ExchangeGoods exchangeGoods = service.findById(id);
		mm.put("model", JsonKit.toJson(exchangeGoods));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "exchangeGoods_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		ExchangeGoods exchangeGoods = service.findById(id);
		if(exchangeGoods.getStatus().equals(0)){
			exchangeGoods.setStatusName("已下架");
		}else if(exchangeGoods.getStatus().equals(1)){
			exchangeGoods.setStatusName("已上架");
		}
		mm.put("model", JsonKit.toJson(exchangeGoods));
		mm.put("exchangeGoods", exchangeGoods);
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "exchangeGoods_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE,new GoodsIntercept());
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		ExchangeGoods exchangeGoods = mapping(PREFIX, ExchangeGoods.class);
		if(exchangeGoods.getStock() < 0){
			return error("库存数量不能小于0");
		}
		if(exchangeGoods.getExchange_credits().compareTo(new BigDecimal(0)) != 1){
			return error("兑换积分必须大于0");
		}
		exchangeGoods.setGoods_number("j" + DateKit.getAllTime() + RandomKit.randomNumbers(4));
		exchangeGoods.setCreate_time(new Date());
		boolean temp = service.save(exchangeGoods);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		ExchangeGoods exchangeGoods = mapping(PREFIX, ExchangeGoods.class);
		if(exchangeGoods.getStock() < 0){
			return error("库存数量不能小于0");
		}
		if(exchangeGoods.getExchange_credits().compareTo(new BigDecimal(0)) != 1){
			return error("兑换积分必须大于0");
		}
		boolean temp = service.update(exchangeGoods);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		List<ExchangeGoods> goodsList = new ArrayList<ExchangeGoods>();
		String[] goodIds = ids.split(",");
		for (String id : goodIds) {
			ExchangeGoods goods = Blade.create(ExchangeGoods.class).findById(id);
			//下架中的才能删除
			if(goods.getStatus().equals(0)){
				ExchangeGoods eg = new ExchangeGoods();
				eg.setId(Integer.valueOf(id));
				eg.setStatus(2);
				goodsList.add(eg);
			}
		}
		try {
			Blade.create(ExchangeGoods.class).updateBatchTemplateById(goodsList);
			if(goodsList.size() == 0){
				return success("已上架商品先下架后才能删除");
			}else if(goodsList.size() < goodIds.length && goodsList.size() > 0){
				return success("成功删除已下架商品，已上架商品先下架后才能删除");
			}else{
				return success(DEL_SUCCESS_MSG);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return error(DEL_FAIL_MSG);
		}
		
		//int cnt = service.deleteByIds(ids);
//		if (cnt > 0) {
//			return success(DEL_SUCCESS_MSG);
//		} else {
//			return error(DEL_FAIL_MSG);
//		}
	}
	
	@ResponseBody
	@RequestMapping("/edit_check")
	public AjaxResult edit_check(@RequestParam String ids) {
		ExchangeGoods eg = service.findFirstBy("id = #{id} and status = #{status}",
				Paras.create().set("id", ids).set("status", 0));
		
		if(null != eg){
			return success(SAVE_SUCCESS_MSG);
		}else{
			return error("不能修改已上架商品");
		}
	}
	
	@ResponseBody
	@RequestMapping("/goodsUpOk")
	public AjaxResult goodsUpOk() {
		String ids = getParameter("ids");
		Blade blade = Blade.create(ExchangeGoods.class);
		Paras updateMap = Paras.create().set("status", 1).set("ids", ids.split(","));
		boolean temp = blade.updateBy("status = #{status}", "id in (#{join(ids)})", updateMap);
		if (temp) {
			return success("上架成功!");
		} else {
			return error("上架失败!");
		}
	}
	
	@ResponseBody
	@RequestMapping("/goodsDownOk")
	public AjaxResult goodsDownOk() {
		String ids = getParameter("ids");
		Blade blade = Blade.create(ExchangeGoods.class);
		Paras updateMap = Paras.create().set("status", 0).set("ids", ids.split(","));
		boolean temp = blade.updateBy("status = #{status}", "id in (#{join(ids)})", updateMap);
		if (temp) {
			return success("下架成功!");
		} else {
			return error("下架失败!");
		}
	}
	
	/**
	 * 导出商品
	 * @param map
	 * @return
	 */
	@RequestMapping("/exportExcel")
	public String exportExcel(ModelMap map){
		String status_equal = getParameter("status_equal");
		String goods_name = getParameter("goods_name");
		String goods_number = getParameter("goods_number");
		String create_time_dategt = getParameter("create_time_dategt");
		String create_time_datelt = getParameter("create_time_datelt");
		//获取当前登录用户
		ShiroUser u = ShiroKit.getUser();
		String userName = u.getName();
		String sql = Md.getSql(LIST_SOURCE);
		
		Paras para = Paras.create();
		if(!StrKit.isBlank(status_equal)){
			sql += " and status = #{status_equal}";
			para.set("status_equal", status_equal);
		}
		if(!StrKit.isBlank(goods_name)){
			goods_name = URLKit.decode(URLKit.decode(goods_name, "UTF-8"),"UTF-8");
			sql += " and goods_name like #{goods_name}";
			para.set("goods_name", "%"+goods_name+"%");
		}
		if(!StrKit.isBlank(goods_number)){
			para.set("goods_number", "%" + goods_number + "%");
			sql += " and goods_number like #{goods_number}";
		}
		if(!StrKit.isBlank(create_time_dategt)){
			create_time_dategt = URLKit.decode(URLKit.decode(create_time_dategt, "UTF-8"),"UTF-8");
			sql += " and create_time > #{create_time_dategt}";
			para.set("create_time_dategt", create_time_dategt);
		}
		if(!StrKit.isBlank(create_time_datelt)){
			create_time_datelt = URLKit.decode(URLKit.decode(create_time_datelt, "UTF-8"),"UTF-8");
			sql += " and create_time < #{create_time_datelt}";
			para.set("create_time_datelt", create_time_datelt);
		}
		sql += " order by create_time desc";
		List<ExchangeGoods> list = service.find(sql, para);
		map.put(NormalExcelConstants.FILE_NAME,"商品信息");
        map.put(NormalExcelConstants.CLASS,ExchangeGoods.class);
        map.put(NormalExcelConstants.PARAMS,new ExportParams("商品列表", "导出人:"+userName,
                "商品信息"));
        map.put(NormalExcelConstants.DATA_LIST,list);
		return NormalExcelConstants.JEECG_EXCEL_VIEW;
	}
	
}
