package com.rrgy.exchange.controller;

import java.util.Date;
import java.util.List;

import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rrgy.common.base.BaseController;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.StrKit;
import com.rrgy.core.toolbox.kit.URLKit;
import com.rrgy.exchange.intercept.OrdersIntercept;
import com.rrgy.exchange.model.ExchangeOrder;
import com.rrgy.exchange.model.ExchangeOrderAddress;
import com.rrgy.exchange.model.ExchangeOrderDetail;
import com.rrgy.exchange.service.ExchangeOrderService;

/**
 * 订单管理
 * Generated by Blade.
 * 2017-03-10 14:48:55
 */
@Controller
@RequestMapping("/orders")
public class ExchangeOrderController extends BaseController {
	private static String CODE = "orders";
	private static String PREFIX = "exchange_order";
	private static String LIST_SOURCE = "exchangeOrder.list";
	private static String BASE_PATH = "/exchange/orders/";
	
	@Autowired
	ExchangeOrderService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "exchangeOrder.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "exchangeOrder_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		ExchangeOrder exchangeOrder = service.findById(id);
		exchangeOrder.getOrder_source();
		if(exchangeOrder.getOrder_source().equals(1)){
			exchangeOrder.setOrder_source_name("PC端");
		}else if(exchangeOrder.getOrder_source().equals(2)){
			exchangeOrder.setOrder_source_name("安卓端");
		}else if(exchangeOrder.getOrder_source().equals(3)){
			exchangeOrder.setOrder_source_name("苹果端");
		}
		
		ExchangeOrderAddress orderAddress = Blade.create(ExchangeOrderAddress.class).findFirstBy("order_id = #{order_id}",
				Paras.create().set("order_id", exchangeOrder.getId()));
		if(null != orderAddress){
			String address = orderAddress.getProvince_name() + " " + orderAddress.getCity_name() + " " + orderAddress.getArea_name() + " " + orderAddress.getAddress(); 
			exchangeOrder.setAddress(address);
			exchangeOrder.setCity_name(orderAddress.getCity_name());
			exchangeOrder.setArea_name(orderAddress.getArea_name());
			exchangeOrder.setProvince_name(orderAddress.getProvince_name());
			exchangeOrder.setPostcode(orderAddress.getPostcode());
			exchangeOrder.setPhone(orderAddress.getPhone());
			exchangeOrder.setConsignee(orderAddress.getConsignee());
		}
		
		List<ExchangeOrderDetail> listDetail = Blade.create(ExchangeOrderDetail.class).findBy("order_id = #{order_id}",
				Paras.create().set("order_id", exchangeOrder.getId()));
		
		mm.put("model", JsonKit.toJson(exchangeOrder));
		mm.put("id", id);
		mm.put("listDetail", listDetail);
		mm.put("code", CODE);
		return BASE_PATH + "exchangeOrder_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		ExchangeOrder exchangeOrder = service.findById(id);
		exchangeOrder.getOrder_source();
		if(exchangeOrder.getOrder_source().equals(1)){
			exchangeOrder.setOrder_source_name("PC端");
		}else if(exchangeOrder.getOrder_source().equals(2)){
			exchangeOrder.setOrder_source_name("安卓端");
		}else if(exchangeOrder.getOrder_source().equals(3)){
			exchangeOrder.setOrder_source_name("苹果端");
		}
		
		ExchangeOrderAddress orderAddress = Blade.create(ExchangeOrderAddress.class).findFirstBy("order_id = #{order_id}",
				Paras.create().set("order_id", exchangeOrder.getId()));
		if(null != orderAddress){
			String address = orderAddress.getProvince_name() + " " + orderAddress.getCity_name() + " " + orderAddress.getArea_name() + " " + orderAddress.getAddress(); 
			exchangeOrder.setAddress(address);
			exchangeOrder.setCity_name(orderAddress.getCity_name());
			exchangeOrder.setArea_name(orderAddress.getArea_name());
			exchangeOrder.setProvince_name(orderAddress.getProvince_name());
			exchangeOrder.setPostcode(orderAddress.getPostcode());
			exchangeOrder.setPhone(orderAddress.getPhone());
			exchangeOrder.setConsignee(orderAddress.getConsignee());
		}
		
		List<ExchangeOrderDetail> listDetail = Blade.create(ExchangeOrderDetail.class).findBy("order_id = #{order_id}",
				Paras.create().set("order_id", exchangeOrder.getId()));
		
		mm.put("model", JsonKit.toJson(exchangeOrder));
		mm.put("id", id);
		mm.put("listDetail", listDetail);
		mm.put("code", CODE);
		return BASE_PATH + "exchangeOrder_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE,new OrdersIntercept());
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		ExchangeOrder exchangeOrder = mapping(PREFIX, ExchangeOrder.class);
		boolean temp = service.save(exchangeOrder);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		ExchangeOrder exchangeOrder = mapping(PREFIX, ExchangeOrder.class);
		exchangeOrder.setDelivery_time(new Date());
		exchangeOrder.setStatus(2);
		boolean temp = service.update(exchangeOrder);
		if (temp) {
			return success("发货成功");
		} else {
			return error("发货失败");
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
	
	@ResponseBody
	@RequestMapping("/edit_check")
	public AjaxResult edit_check(@RequestParam String ids) {
		ExchangeOrder eo = service.findFirstBy("id = #{id} and status = #{status}",
				Paras.create().set("id", ids).set("status", 1));
		
		if(null != eo){
			return success(SAVE_SUCCESS_MSG);
		}else{
			return error("请选择待发货订单");
		}
	}
	
	
	/**
	 * 导出订单
	 * @param map
	 * @return
	 */
	@RequestMapping("/exportExcel")
	public String exportExcel(ModelMap map){
		String order_user_id = getParameter("order_user_id_equal");
		String status = getParameter("status_equal");
		String courier_number = getParameter("courier_number");
		String order_number = getParameter("order_number");
		String order_user_name = getParameter("order_user_name");
		String buy_time_dategt = getParameter("buy_time_dategt");
		String buy_time_datelt = getParameter("buy_time_datelt");
		String delivery_time_dategt = getParameter("delivery_time_dategt");
		String delivery_time_datelt = getParameter("delivery_time_datelt");
		//获取当前登录用户
		ShiroUser u = ShiroKit.getUser();
		String userName = u.getName();
		String sql = Md.getSql(LIST_SOURCE);
		sql += " where 1=1 ";
		Paras para = Paras.create();
		if(!StrKit.isBlank(order_user_id)){
			sql += " and order_user_id = #{order_user_id}";
			para.set("order_user_id", order_user_id);
		}
		if(!StrKit.isBlank(status)){
			sql += " and status = #{status}";
			para.set("status", status);
		}
		if(!StrKit.isBlank(courier_number)){
			para.set("courier_number", "%" + courier_number + "%");
			sql += " and courier_number like #{courier_number}";
		}
		if(!StrKit.isBlank(order_number)){
			para.set("order_number", "%" + order_number + "%");
			sql += " and order_number like #{order_number}";
		}
		if(!StrKit.isBlank(order_user_name)){
			para.set("order_user_name", "%" + order_user_name + "%");
			sql += " and order_user_name like #{order_user_name}";
		}
		if(!StrKit.isBlank(buy_time_dategt)){
			buy_time_dategt = URLKit.decode(URLKit.decode(buy_time_dategt, "UTF-8"),"UTF-8");
			sql += " and buy_time > #{buy_time_dategt}";
			para.set("buy_time_dategt", buy_time_dategt);
		}
		if(!StrKit.isBlank(buy_time_datelt)){
			buy_time_datelt = URLKit.decode(URLKit.decode(buy_time_datelt, "UTF-8"),"UTF-8");
			sql += " and buy_time < #{buy_time_datelt}";
			para.set("buy_time_datelt", buy_time_datelt);
		}
		
		if(!StrKit.isBlank(delivery_time_dategt)){
			delivery_time_dategt = URLKit.decode(URLKit.decode(delivery_time_dategt, "UTF-8"),"UTF-8");
			sql += " and delivery_time > #{delivery_time_dategt}";
			para.set("delivery_time_dategt", delivery_time_dategt);
		}
		if(!StrKit.isBlank(delivery_time_datelt)){
			delivery_time_datelt = URLKit.decode(URLKit.decode(delivery_time_datelt, "UTF-8"),"UTF-8");
			sql += " and delivery_time < #{delivery_time_datelt}";
			para.set("delivery_time_datelt", delivery_time_datelt);
		}
		sql += " order by buy_time desc";
		List<ExchangeOrder> list = service.find(sql, para);
		map.put(NormalExcelConstants.FILE_NAME,"订单信息");
        map.put(NormalExcelConstants.CLASS,ExchangeOrder.class);
        map.put(NormalExcelConstants.PARAMS,new ExportParams("订单列表", "导出人:"+userName,
                "订单信息"));
        map.put(NormalExcelConstants.DATA_LIST,list);
		return NormalExcelConstants.JEECG_EXCEL_VIEW;
	}
}
