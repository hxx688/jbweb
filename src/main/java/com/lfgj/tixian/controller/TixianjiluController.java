package com.lfgj.tixian.controller;

import java.util.List;

import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.lfgj.clinet.pay.payment.utils.AesEncryption;
import com.lfgj.clinet.pay.payment.utils.MD5Util;
import com.lfgj.member.model.Member;
import com.lfgj.order.model.Order;
import com.lfgj.tixian.intercept.TixianjiluIntercept;
import com.lfgj.tixian.model.Tixianjilu;
import com.lfgj.tixian.service.TixianjiluService;
import com.lfgj.util.CommKit;
import com.rrgy.common.base.BaseController;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.annotation.DoLog;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Func;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.LogKit;
import com.rrgy.core.toolbox.kit.MathKit;
import com.rrgy.core.toolbox.kit.StrKit;
import com.rrgy.core.toolbox.kit.URLKit;
import com.rrgy.system.model.Attach;
import com.rrgy.system.model.User;

/**
 * 提现管理 Generated by Blade. 2017-01-09 15:38:45
 */
@Controller
@RequestMapping("/tixianjilu")
public class TixianjiluController extends BaseController {
	private static String CODE = "tixianjilu";
	private static String PREFIX = "dt_tixianjilu";
	private static String LIST_SOURCE = "tixianjilu.queryList";
	private static String BASE_PATH = "/tixian/";

	@Autowired
	TixianjiluService service;

	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		
		mm.put("code", CODE);
		mm.put("is_agent", user.getIs_agent());
		return BASE_PATH + "tixianjilu.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "tixianjilu_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		Tixianjilu tixianjilu = service.findById(id);
		Blade personBlade = Blade.create(Member.class);
		Member p = personBlade.findById(tixianjilu.getUserId());
		if(p!=null){
			tixianjilu.setUser_name(p.getMobile());
		}
		
//		String shijiamount = MathKit.sub(tixianjilu.getAmount(),
//				MathKit.add(tixianjilu.getShui(), tixianjilu.getShouxufei())) + "";
//		tixianjilu.setShijiamount(shijiamount);
		if(tixianjilu.getStatus() == 1){
			tixianjilu.setStatus_name("申请中");
		}else if(tixianjilu.getStatus() == 2){
			tixianjilu.setStatus_name("已打款");
		}else if(tixianjilu.getStatus() == 5){
			tixianjilu.setStatus_name("付款失败");
		}else{
			tixianjilu.setStatus_name("退回");	
		}
		
		mm.put("p", p);
		mm.put("model", JsonKit.toJson(tixianjilu));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "tixianjilu_audit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		Tixianjilu tixianjilu = service.findById(id);
		Blade personBlade = Blade.create(Member.class);
		Member p = personBlade.findById(tixianjilu.getUserId());
		tixianjilu.setUser_name(p.getMobile());
		
//		String shijiamount = MathKit.sub(tixianjilu.getAmount(),
//				MathKit.add(tixianjilu.getShui(), tixianjilu.getShouxufei())) + "";
//		tixianjilu.setShijiamount(shijiamount);
		if(tixianjilu.getStatus() == 1){
			tixianjilu.setStatus_name("申请中");
		}else if(tixianjilu.getStatus() == 2){
			tixianjilu.setStatus_name("已打款");
		}else if(tixianjilu.getStatus() == 5){
			tixianjilu.setStatus_name("付款失败");
		}else{
			tixianjilu.setStatus_name("退回");	
		}
		mm.put("p", p);
		mm.put("model", JsonKit.toJson(tixianjilu));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "tixianjilu_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		TixianjiluIntercept tixian = new TixianjiluIntercept();
		Object grid = paginate(LIST_SOURCE,tixian);
		return grid;
	}

	@RequestMapping("/my")
	public String myindex(ModelMap mm) {
		mm.put("code", CODE);
		mm.put("btn_code", "mytixianjilu");
		return BASE_PATH + "tixianjilu_my.html";
	}
	
	@ResponseBody
	@RequestMapping("/mylist")
	public Object myList() {
		ShiroUser user = ShiroKit.getUser();
		TixianjiluIntercept tx = new TixianjiluIntercept();
		tx.setUserId(user.getId().toString());
		Object grid = paginate(LIST_SOURCE, tx);
		return grid;
	}
	
	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		Tixianjilu tixianjilu = mapping(PREFIX, Tixianjilu.class);
		boolean temp = service.save(tixianjilu);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		Tixianjilu tixianjilu = mapping(PREFIX, Tixianjilu.class);
		boolean temp = service.update(tixianjilu);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
	
	@ResponseBody
	@RequestMapping("/audit")
	@DoLog(name = "[提现列表]审核")
	public AjaxResult updateTwoAudit() {
		Tixianjilu tixianjilu = mapping(PREFIX, Tixianjilu.class);
		// 获取当前登录用户
		ShiroUser user = ShiroKit.getUser();
		Attach attach = Blade.create(Attach.class).findById(tixianjilu.getFile_id());
		if(attach!=null){
			tixianjilu.setFile_path(attach.getUrl());
		}
		String flag = "";
		try {
			flag = service.auditTixian(user,tixianjilu);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if("1".equals(flag)){
			return success("审核成功!");
		}else if("2".equals(flag)){
			return error("审核失败，该提现已审核!");
		}else if(!Func.isEmpty(flag)){
			return error(""+flag);
		}else{
			return error("审核失败!");
		}
	}
	
	/**
	 * 代付成功回调通知
	 * 
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping("/notify_transfer")
	public String notify_transfer() throws Exception {

		LogKit.info("===支付供应链综合服务平台代付回调通知====");

		String method = getParameter("Method");
		String data = getParameter("Data");
		String sign = getParameter("Sign");

		System.out.println("Method:" + method);
		System.out.println("Data:" + data);
		System.out.println("Sign:" + sign);

		String secretkey = CommKit.getParameter("301").getPara();

		// 解密Data
		String des_data = AesEncryption.Desencrypt(data, secretkey, secretkey);

		String sign_ = MD5Util.string2MD5(data + secretkey).toLowerCase();
		// 验证签名
		if (sign.equals(sign_)) {
			JSONObject data_json = JSONObject.parseObject(des_data);
			// 单号
			String ordernumber = data_json.getString("ordernumber");
			String payorderid = data_json.getString("payorderid");
			String amount = data_json.getString("amount");
			String extraparams = data_json.getString("extraparams");
			Tixianjilu txjl = new Tixianjilu();
			txjl.setTixianNum(ordernumber);
			txjl.setTrade_no(payorderid);
			txjl.setFangshi(2);
			txjl.setYuanyin(" 成功代扣："+MathKit.div(amount, 100));
			service.updateByNum(txjl);
		}
		
		return "";
	}
	
	/**
	 * 导出提现
	 * @param map
	 * @return
	 */
	@RequestMapping("/exportExcel")
	public String exportExcel(ModelMap map){
		String userId_equal = getParameter("userId_skip");
		String tixianNum = getParameter("tixianNum");
		String status = getParameter("status_skip");
		String add_time_dategt = getParameter("add_time_dategt");
		String add_time_datelt = getParameter("add_time_datelt");
		String dakuan_time_dategt = getParameter("dakuan_time_dategt");
		String dakuan_time_datelt = getParameter("dakuan_time_datelt");
		String user_name = getParameter("user_name_skip");
		String kaihuming = getParameter("kaihuming_skip");
		//获取当前登录用户
		ShiroUser u = ShiroKit.getUser();
		String userName = u.getName();
		String sql = Md.getSql(LIST_SOURCE);
//		sql += " where 1=1";
		Paras para = Paras.create();
		if(!StrKit.isBlank(userId_equal)){
			sql += " and t.userId = #{userId_equal}";
			para.set("userId_equal", userId_equal);
		}
		if(!StrKit.isBlank(tixianNum)){
			sql += " and t.tixianNum like #{tixianNum}";
			para.set("tixianNum", "%"+tixianNum+"%");
		}
		if(!StrKit.isBlank(status)){
			sql += " and t.status = #{status}";
			para.set("status", status);
		}
		if(!StrKit.isBlank(user_name)){
			user_name = URLKit.decode(URLKit.decode(user_name, "UTF-8"),"UTF-8");
			para.set("user_name", "%" + user_name + "%");
			sql += " and u.nick_name like #{user_name}";
		}
		if(!StrKit.isBlank(kaihuming)){
			kaihuming = URLKit.decode(URLKit.decode(kaihuming, "UTF-8"),"UTF-8");
			para.set("kaihuming", "%" + kaihuming + "%");
			sql += " and t.kaihuming like #{kaihuming}";
		}
		
		if(!StrKit.isBlank(add_time_dategt)){
			add_time_dategt = URLKit.decode(URLKit.decode(add_time_dategt, "UTF-8"),"UTF-8");
			sql += " and t.add_time > #{add_time_dategt}";
			para.set("add_time_dategt", add_time_dategt);
		}
		if(!StrKit.isBlank(add_time_datelt)){
			add_time_datelt = URLKit.decode(URLKit.decode(add_time_datelt, "UTF-8"),"UTF-8");
			sql += " and t.add_time < #{add_time_datelt}";
			para.set("add_time_datelt", add_time_datelt);
		}
		if(!StrKit.isBlank(dakuan_time_dategt)){
			dakuan_time_dategt = URLKit.decode(URLKit.decode(dakuan_time_dategt, "UTF-8"),"UTF-8");
			sql += " and t.dakuan_time > #{dakuan_time_dategt}";
			para.set("dakuan_time_dategt", dakuan_time_dategt);
		}
		if(!StrKit.isBlank(dakuan_time_datelt)){
			dakuan_time_datelt = URLKit.decode(URLKit.decode(dakuan_time_datelt, "UTF-8"),"UTF-8");
			sql += " and t.dakuan_time < #{dakuan_time_datelt}";
			para.set("dakuan_time_datelt", dakuan_time_datelt);
		}
		sql += " order by t.add_time desc";
		List<Tixianjilu> listTixian = service.find(sql, para);
		map.put(NormalExcelConstants.FILE_NAME,"提现信息");
        map.put(NormalExcelConstants.CLASS,Tixianjilu.class);
        map.put(NormalExcelConstants.PARAMS,new ExportParams("提现列表", "导出人:"+userName,
                "订单信息"));
        map.put(NormalExcelConstants.DATA_LIST,listTixian);
		return NormalExcelConstants.JEECG_EXCEL_VIEW;
	}
}
