package com.lfgj.article.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rrgy.common.base.BaseController;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Db;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.industry.model.Industry;
import com.lfgj.article.intercept.ArticleIntercept;
import com.lfgj.article.model.Article;
import com.lfgj.article.model.Category;
import com.lfgj.article.model.Channel;
import com.lfgj.article.service.ArticleService;

/**
 * Generated by Blade.
 * 2017-09-03 11:17:20
 */
@Controller
@RequestMapping("/article")
public class ArticleController extends BaseController {
	private static String CODE = "article";
	private static String PREFIX = "dt_article";
	private static String LIST_SOURCE = "article.list";
	private static String BASE_PATH = "/article/";
	
	@Autowired
	ArticleService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "article.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "article_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		Article article = service.findById(id);
		mm.put("model", JsonKit.toJson(article));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "article_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		Article article = service.findById(id);
		Channel channel =  Blade.create(Channel.class).findById(article.getChannel_id());
		article.setChannel_name(channel.getTitle());
		Category category =  Blade.create(Category.class).findById(article.getCategory_id());
		article.setCategory_name(category.getTitle());
		if("1".equals(article.getGroupids_view())){
			article.setGroup_view_name("会员");
		}else if("2".equals(article.getGroupids_view())){
			article.setGroup_view_name("代理商");
		}else{
			article.setGroup_view_name("不限");
		}
		
		mm.put("model", JsonKit.toJson(article));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "article_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		ArticleIntercept ai = new ArticleIntercept();
		ai.setFrom("1");
		Object grid = paginate(LIST_SOURCE,ai);
		return grid;
	}
	
	@RequestMapping("/notice")
	public String noticeindex(ModelMap mm) {
		mm.put("code", CODE);
		mm.put("btn_code","noticelist");
		return BASE_PATH + "article_notice.html";
	}
	
	@ResponseBody
	@RequestMapping("/noticelist")
	public Object noticelist() {
		ArticleIntercept ai = new ArticleIntercept();
		ai.setFrom("1");
		ai.setCategroy("1");
		Object grid = paginate(LIST_SOURCE,ai);
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		Article article = mapping(PREFIX, Article.class);
		
		Category category = Blade.create(Category.class).findById(article.getCategory_id());
		article.setChannel_id(category.getChannel_id());
		article.setAdd_time(new Date());
		article.setUpdate_time(new Date());
		boolean temp = service.save(article);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		Article article = mapping(PREFIX, Article.class);
		
		Category category = Blade.create(Category.class).findById(article.getCategory_id());
		article.setChannel_id(category.getChannel_id());
		
		article.setUpdate_time(new Date());
		boolean temp = service.update(article);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
