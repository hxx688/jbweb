package com.lfgj.financial.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lfgj.financial.intercept.FinancialIntercept;
import com.lfgj.financial.model.Financial;
import com.lfgj.financial.service.FinancialService;
import com.lfgj.member.model.Member;
import com.lfgj.util.LfConstant;
import com.rrgy.common.base.BaseController;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.JsonKit;

/**
 * Generated by Blade.
 * 2017-09-18 21:29:22
 */
@Controller
@RequestMapping("/financial")
public class FinancialController extends BaseController {
	private static String CODE = "financial";
	private static String PREFIX = "dt_financial";
	private static String LIST_SOURCE = "financial.list";
	private static String BASE_PATH = "/financial/";
	
	@Autowired
	FinancialService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "financial.html";
	}
	
	@RequestMapping("/showMemberFin" + "/{id}" + "/{type}" + "/{startDate}" + "/{endDate}")
	public String memberFinancial(@PathVariable String id, @PathVariable String type,@PathVariable String startDate,@PathVariable String endDate, ModelMap mm) {
		mm.put("code", CODE);
		mm.put("userId", id);
		mm.put("type", type);
		mm.put("isStaticSub", "1");
		Member user = Blade.create(Member.class).findById(id);
		mm.put("user", user);
		mm.put("startDate",  "0".equals(startDate) ? "" : startDate );
		mm.put("endDate", "0".equals(endDate) ? "" : endDate);
		return BASE_PATH + "member_financial.html";
	}
	
	@RequestMapping("/showMemberFin" + "/{id}" + "/{type}")
	public String memberFinancial(@PathVariable String id, @PathVariable String type, ModelMap mm) {
		mm.put("code", CODE);
		mm.put("userId", id);
		mm.put("type", type);
		mm.put("isStaticSub", "0");
		Member user = Blade.create(Member.class).findById(id);
		mm.put("user", user);
		mm.put("startDate", "");
		mm.put("endDate", "");
		return BASE_PATH + "member_financial.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "financial_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		Financial financial = service.findById(id);
		mm.put("model", JsonKit.toJson(financial));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "financial_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		Financial financial = service.findById(id);
		mm.put("model", JsonKit.toJson(financial));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "financial_view.html";
	}
	
	@ResponseBody
	@RequestMapping("/memberFunList")
	public Object memberFunList() {
		String userId = this.getParameter("userId");
		String source_type = this.getParameter("source_type");
		String isStaticSub = this.getParameter("isStaticSub"); // 是否统计下级
		String startDate = this.getParameter("startDate");
		String endDate = this.getParameter("endDate");
		
		if("1".equals(source_type)){ // 余额
			source_type = "";
		}else if("2".equals(source_type)){ // 充值
			source_type = "充值";
		}else if("3".equals(source_type)){ // 提现
			source_type = "提现";
		}else if("4".equals(source_type)){ //总盈亏
			source_type = "总盈亏";
		}else if("5".equals(source_type)){ //手续费
			source_type = "手续费";
		}else{
			source_type = "未知";
		}
		
		FinancialIntercept financialIter = new FinancialIntercept();
		financialIter.setUserId(userId);
		financialIter.setSource_type(source_type);
		financialIter.setIsStaticSub(isStaticSub);
		financialIter.setStartDate(startDate);
		financialIter.setEndDate(endDate);
		Object grid = paginate(LIST_SOURCE,financialIter);
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		FinancialIntercept financialIter = new FinancialIntercept();
		Object grid = paginate(LIST_SOURCE,financialIter);
		return grid;
	}
	

	@RequestMapping("/recharge")
	public String recharge(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "financial_recharge.html";
	}

	@ResponseBody
	@RequestMapping("/rechargelist")
	public Object rechargelist() {
		FinancialIntercept financialIter = new FinancialIntercept();
		financialIter.setSource_type(LfConstant.Source.A.value);
		Object grid = paginate(LIST_SOURCE,financialIter);
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		Financial financial = mapping(PREFIX, Financial.class);
		boolean temp = service.save(financial);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		Financial financial = mapping(PREFIX, Financial.class);
		boolean temp = service.update(financial);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
