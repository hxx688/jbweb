package com.lfgj.financial.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.lfgj.clinet.payHqf.exception.PayException;
import com.lfgj.clinet.payHqf.util.ConstantHqf;
import com.lfgj.clinet.payHqf.util.Md5Util;
import com.lfgj.clinet.paySZ.util.SzPayUtil;
import com.lfgj.member.service.MemberService;
import com.lfgj.util.CommKit;
import com.rrgy.common.base.BaseController;

/**
 * Generated by Blade.
 * 2017-09-18 21:29:22
 */
@Controller
@RequestMapping("/payfront")
public class PayFrontController extends BaseController {
	private static String BASE_PATH = "/payfront/";
	
	@Autowired
	MemberService memberService;
	
	@RequestMapping("/result")
	public String index(ModelMap mm) {
		return BASE_PATH + "showresult.html";
	}
	
	/**
	 * 深圳
	 * @param mm
	 * @return
	 */
	@RequestMapping("/notifySz")
	public String notifySz(ModelMap mm){
		System.out.println("通道（深圳）支付异步通知:"+this.getParas());
		
		// 获取支付平台返回的数据
		String pay_order_id = this.getParameter("pay_order_id","");
		String pay_amount = this.getParameter("pay_amount","");
		String pay_remark = this.getParameter("pay_remark","");
		String pay_product_name = this.getParameter("pay_product_name","");
		String sign = this.getParameter("sign","");
		
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("pay_order_id", pay_order_id);
		map.put("pay_amount", pay_amount);
		map.put("pay_remark", pay_remark);
		map.put("pay_product_name", pay_product_name);
		
		String key = CommKit.getParameter("311").getPara();
		String chesign = SzPayUtil.createSign(map, key);
		
		System.out.println("chesign:"+chesign);
		
		String result = "error";
		if(sign.equals(chesign)){
			boolean b = memberService.updatePayInfo(pay_order_id, pay_order_id, pay_amount, true);
			if(b){
				result = "ok";
			}
		}
		
		mm.put("result_info", result);
		return BASE_PATH + "notify_url.html";
	}
	
	/**
	 * 环球付
	 * @param mm
	 * @return
	 * @throws UnsupportedEncodingException
	 * @throws PayException
	 */
	@RequestMapping("/notifyHqf")
	public String notifyHqf(ModelMap mm) throws UnsupportedEncodingException, PayException{
		System.out.println("通道（环球付）支付异步通知:"+this.getParas());
		
		boolean shanNotify = md5VerifyShan(this.getRequest());
		String result = "fail";
		if(shanNotify){
			if("TRADE_SUCCESS".equals(this.getParameter("trade_status"))){
				//商户订单号
				String out_order_no = this.getParameter("out_order_no","");
				//环球汇交易号
				String trade_no = this.getParameter("trade_no","");
				//价格
				String total_fee = this.getParameter("total_fee","");
				
				boolean b = memberService.updatePayInfo(out_order_no, trade_no, total_fee, false);
				if(b){
					result = "ok";
				}
			}
		}
		
		mm.put("result_info", result);
		return BASE_PATH + "notify_url.html";
	}

    /**
     * 立达付
     * @param mm
     * @return
     * @throws UnsupportedEncodingException
     * @throws PayException
     */
    @RequestMapping("/notifyLdf")
    public String notifyLdf(ModelMap mm) throws UnsupportedEncodingException, PayException{
        System.out.println("通道（立达付）支付异步通知:"+this.getParas());

        boolean shanNotify = md5VerifyShan(this.getRequest());
        String result = "fail";
        if(shanNotify){
            if("TRADE_SUCCESS".equals(this.getParameter("trade_status"))){
                //商户订单号
                String out_order_no = this.getParameter("out_order_no","");
                //环球汇交易号
                String trade_no = this.getParameter("trade_no","");
                //价格
                String total_fee = this.getParameter("total_fee","");

                boolean b = memberService.updatePayInfo(out_order_no, trade_no, total_fee, false);
                if(b){
                    result = "ok";
                }
            }
        }

        mm.put("result_info", result);
        return BASE_PATH + "notify_url.html";
    }
	
	/**
	 * 环球付验签方法
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 * @throws PayException
	 */
	private boolean md5VerifyShan(HttpServletRequest request) throws UnsupportedEncodingException, PayException{
		
		request.setCharacterEncoding("UTF-8");
		String out_order_no = request.getParameter("out_order_no");
		if("".equals(out_order_no)||out_order_no==null){
			throw new PayException("out_order_no不能为空");
		}
		String total_fee = request.getParameter("total_fee");
		if("".equals(total_fee)||total_fee==null){
			throw new PayException("total_fee不能为空");
		}
		String trade_status  = request.getParameter("trade_status");
		if("".equals(total_fee)||total_fee==null){
			throw new PayException("trade_status不能为空");
		}
		String sign = request.getParameter("sign");
		if("".equals(total_fee)||total_fee==null){
			throw new PayException("sign不能为空");
		}
		String key = ConstantHqf.KEY;
		String pid = ConstantHqf.PARTNER;
		Md5Util md5Util = new Md5Util();
		String signMd5 = md5Util.encode(out_order_no+total_fee+trade_status+pid+key, null);
		if(signMd5.equals(sign)){
			return true;
		}
		return false;
	}
	
}