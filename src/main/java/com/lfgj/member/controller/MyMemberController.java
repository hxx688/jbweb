package com.lfgj.member.controller;

import java.math.BigDecimal;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rrgy.common.base.BaseController;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.annotation.Before;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Func;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.StrKit;
import com.rrgy.system.meta.intercept.MemberValidator;
import com.rrgy.system.meta.intercept.MyMemberIntercept;
import com.rrgy.system.model.User;
import com.lfgj.member.model.Member;
import com.lfgj.member.service.MemberService;
import com.lfgj.util.MD5;

/**
 * Generated by Blade.
 * 2017-09-12 16:12:39
 * 我的会员
 */
@Controller
@RequestMapping("/mymember")
public class MyMemberController extends BaseController {
	private static String CODE = "mymember";
	private static String PREFIX = "lf_member";
	private static String LIST_SOURCE = "member.list";
	private static String BASE_PATH = "/member/";
	
	@Autowired
	MemberService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		
		return BASE_PATH + "member.html";
	}
	
	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "member_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		Member member = service.findById(id);
		member.setPassword("");
		member.setPay_password("");
		mm.put("model", JsonKit.toJson(member));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "member_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		Member member = service.findById(id);
		mm.put("model", JsonKit.toJson(member));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "member_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		MyMemberIntercept mi = new MyMemberIntercept();
		mi.agentid = user.getId();
		Object grid = paginate(LIST_SOURCE, mi);
		return grid;
	}

	@ResponseBody
	@Before(MemberValidator.class)
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		Member pAgent = Blade.create(Member.class).findById(user.getMember_id());
		Member member = mapping(PREFIX, Member.class);
		member.setStatus(0);
		member.setReg_time(new Date());
		member.setAmount(new BigDecimal("0"));
		member.setPoint(new BigDecimal("0"));
		member.setProfi_loss(new BigDecimal("0"));
		member.setRecharge(new BigDecimal("0"));
		member.setWithdraw(new BigDecimal("0"));
		member.setIs_agent(0);
		member.setAgent_id((Integer)user.getId());
		member.setAgent_name((String)user.getName());
		if(pAgent.getLevel()==1){
			member.setFirst_parent(pAgent.getId());
		}else{
			member.setFirst_parent(pAgent.getFirst_parent());
		}	
		member.setParent_id(pAgent.getId());
		member.setParent_name(pAgent.getReal_name());
		if(!Func.isEmpty(pAgent.getParent_ids())){
			member.setParent_ids(pAgent.getId()+","+pAgent.getParent_ids());
		}
		
		MD5 md5 = new MD5();
		member.setPassword(md5.enCodeByMD5(member.getMobile(), member.getMobile()));
		member.setPay_password(md5.enCodeByMD5(member.getMobile(), member.getMobile()));
		
		boolean temp = service.save(member);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@Before(MemberValidator.class)
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		Member member = mapping(PREFIX, Member.class);
		
		MD5 md5 = new MD5();
		if(StrKit.isNotEmpty(member.getPassword())){
			member.setPassword(md5.enCodeByMD5(member.getPassword(), member.getMobile()));
		}
		
		if(StrKit.isNotEmpty(member.getPay_password())){
			member.setPay_password(md5.enCodeByMD5(member.getPay_password(), member.getMobile()));
		}
		
		boolean temp = service.update(member);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
