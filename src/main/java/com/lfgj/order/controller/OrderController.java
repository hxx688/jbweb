package com.lfgj.order.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.lfgj.member.model.Member;
import com.lfgj.order.intercept.OrderIntercept;
import com.lfgj.order.intercept.OrderIntercept2;
import com.lfgj.order.model.Order;
import com.lfgj.order.service.OrderService;
import com.lfgj.order.util.OrderCacheUtil;
import com.lfgj.product.model.Product;
import com.lfgj.product.service.ProductService;
import com.lfgj.product.util.ProductCacheUtil;
import com.lfgj.product.util.ProductListCacheUtil;
import com.lfgj.util.CommKit;
import com.lfgj.util.LfConstant;
import com.rrgy.common.base.BaseController;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Func;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.ajax.AjaxResult;
import com.rrgy.core.toolbox.kit.DateKit;
import com.rrgy.core.toolbox.kit.JsonKit;
import com.rrgy.core.toolbox.kit.MathKit;
import com.rrgy.core.toolbox.kit.StrKit;
import com.rrgy.system.model.User;

/**
 * Generated by Blade.
 * 2017-09-19 21:51:02
 */
@Controller
@RequestMapping("/order")
public class OrderController extends BaseController {
	private static String CODE = "order";
	private static String PREFIX = "dt_orders";
	private static String LIST_SOURCE = "order.list";
	private static String BASE_PATH = "/order/";
	
	@Autowired
	OrderService service;
	@Autowired
	ProductService productService;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		if(LfConstant.agent_role.equals(user.getRoleid())){
			mm.put("is_agent","1");
		}else{
			mm.put("is_agent","0");
		}
		
		Product p = new Product();
		p.setStatus(1);
		List<Product> products = Blade.create(Product.class).findByTemplate(p);
		
		mm.put("products", products);
		mm.put("code", CODE);
		return BASE_PATH + "order.html";
	}
	
	@RequestMapping("/indexpc")
	public String indexpc(ModelMap mm) {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		if(LfConstant.agent_role.equals(user.getRoleid())){
			mm.put("is_agent","1");
		}else{
			mm.put("is_agent","0");
		}
		
		mm.put("code", CODE);
		return BASE_PATH + "order_pc.html";
	}
	
	/**
	 * 佣金显示平仓订单
	 * @param mm
	 * @return
	 */
	@RequestMapping("/indexpc2" + "/{id}" + "/{startDate}" + "/{endDate}")
	public String indexpc2(@PathVariable String id,@PathVariable String startDate,@PathVariable String endDate, ModelMap mm) {
		mm.put("userId", id);
		mm.put("startDate", "0".equals(startDate)? "" : startDate);
		mm.put("endDate", "0".equals(endDate)? "" : endDate);
		mm.put("code", CODE);
		return BASE_PATH + "order_pc2.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "order_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		Order order = service.findById(id);
		mm.put("model", JsonKit.toJson(order));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "order_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		Order order = service.findById(id);
		
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		if(user.getIs_agent() == 1){
			order.setPerson_phone(StrKit.hidePhone(order.getPerson_phone()));
		}
		
		mm.put("model", JsonKit.toJson(order));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "order_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		Member member = Blade.create(Member.class).findById(user.getMember_id());
		
		OrderIntercept order = new OrderIntercept();
		if(LfConstant.agent_role.equals(user.getRoleid())){
			if(member==null){
				order.agentid = user.getId();
			}else{
				order.member_id = member.getId();
			}
		}
		order.status = "1";
		Object grid = paginate(LIST_SOURCE,order);
		return grid;
	}
	
	@ResponseBody
	@RequestMapping("listpc")
	public Object listpc() {
		ShiroUser shiroUser = ShiroKit.getUser();
		User user = Blade.create(User.class).findById(shiroUser.getId());
		Member member = Blade.create(Member.class).findById(user.getMember_id());
		
		OrderIntercept order = new OrderIntercept();
		if(LfConstant.agent_role.equals(user.getRoleid())){
			if(member==null){
				order.agentid = user.getId();
			}else{
				order.member_id = member.getId();
			}
		}
		order.status = "2";
		Object grid = paginate(LIST_SOURCE,order);
		return grid;
	}
	
	/**
	 * 佣金管理显示平仓订单
	 * @return
	 */
	@ResponseBody
	@RequestMapping("listpc2")
	public Object listpc2() {
		String userId = this.getParameter("userId");
		String startDate = this.getParameter("startDate");
		String endDate = this.getParameter("endDate");
		
		OrderIntercept2 order = new OrderIntercept2();
		
		order.status = "2";
		if(!StrKit.isEmpty(userId)){
			order.member_id = Integer.valueOf(userId);
		}else{
			order.member_id = 0;
		}
		
		order.startDate = startDate;
		order.endDate = endDate;
		Object grid = paginate("order.list2",order);
		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		Order order = mapping(PREFIX, Order.class);
		boolean temp = service.save(order);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		Order order = mapping(PREFIX, Order.class);
		boolean temp = service.update(order);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
	
	@ResponseBody
	@RequestMapping("/adjust")
	public AjaxResult updateAdjust() {
		String id = this.getParameter("id");
		String value = this.getParameter("adjust");
		if(Func.isEmpty(value)){
			return error(UPDATE_FAIL_MSG);
		}
		Product product = new Product();
		product.setId(Integer.valueOf(id));
		product.setAdjust(new BigDecimal(value));
		Product old = Blade.create(Product.class).findById(product.getId());
		boolean r = Blade.create(Product.class).update(product);
		if (r) {
			product = Blade.create(Product.class).findById(product.getId());
			if(product.getAdjust().floatValue()!=old.getAdjust().floatValue()
					||product.getBei().floatValue()!=old.getBei().floatValue()){
				productService.saveAdjust(old);
			}
			ProductListCacheUtil.init().put(product);
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}
	
	@ResponseBody
	@RequestMapping("/loadAdjust")
	public AjaxResult loadAdjust() {
		String id = this.getParameter("id");
		
		Product product = new Product();
		product.setId(Integer.valueOf(id));
		product = Blade.create(Product.class).findById(id);
		if (product!=null) {
			return json(product);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}
	
	//止损止盈
	@ResponseBody
	@RequestMapping("/reflash")
	public AjaxResult reflash() {
		OrderCacheUtil.init().clear();	
		List<Order> orders = Md.selectList("order.listAll", Paras.create().set("status","1"),Order.class);
		for(Order order:orders){
			OrderCacheUtil.init().put(order);
		}
		return success("刷新成功");
	}
	
	@ResponseBody
	@RequestMapping("/sale")
	public AjaxResult saleOrder(ModelMap mm){
		Order od = new Order();
		od.setStatus(1);
		Object ids = this.getRequest().getParameter("ids");
		if(!Func.isEmpty(ids)){
			od.setId(Integer.valueOf(ids.toString()));
		}else{
			return error("请选择一个订单");
		}
		List<Order> orders = Blade.create(Product.class).findByTemplate(od);
		
		for(Order order:orders){
			boolean isTask = CommKit.isTask(order.getCode());
			if(!isTask){
				return error("非交易时间，不能平仓");
			}
			JSONObject obj = ProductCacheUtil.init(order.getCode()).get();
			if(obj==null){
				return error("行情获取失败");
			}
			if(order.getStatus()==2){
				OrderCacheUtil.init().remove(order.getId());
				continue;
			}
			
			String price = obj.get("NewPrice").toString();	
			System.out.println(DateKit.getTime()+":后台平仓 ID:"+order.getId());
			price = MathKit.clearZero(price);
			order.setSale_price(price);
			String rs = service.updateOrder(order.getId().toString(),price,"后台平仓");
			if(!"0".equals(rs)){
				System.out.println(DateKit.getTime()+":"+order.getOrder_num()+",平仓失败");
			}
		}
		return success("平仓成功");
	}
}
