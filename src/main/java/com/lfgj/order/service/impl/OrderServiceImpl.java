package com.lfgj.order.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.lfgj.financial.model.Financial;
import com.lfgj.member.model.Member;
import com.lfgj.order.model.Order;
import com.lfgj.order.service.OrderService;
import com.lfgj.order.util.OrderCacheUtil;
import com.lfgj.product.model.Product;
import com.lfgj.product.model.ProductSale;
import com.lfgj.product.util.ProductCacheUtil;
import com.lfgj.util.CommKit;
import com.lfgj.util.LfConstant;
import com.rrgy.core.base.service.BaseService;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.toolbox.Func;
import com.rrgy.core.toolbox.Paras;

/**
 * Generated by Blade.
 * 2017-09-19 21:51:02
 */
@Service
public class OrderServiceImpl extends BaseService<Order> implements OrderService{

	@Override
	public boolean updateStatus(String ids, Object status) {
		Paras paras = Paras.create().set("status", status).set("ids", ids.split(","));
		boolean temp = updateBy("status = #{status}", "id in (#{join(ids)})", paras);
		return temp;
	}

	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> findOne(Object id) {
		return Md.selectUnique("order.findOne", Paras.create().set("id", id), Map.class);
	}

	public String saveOrder(String person_id,String psid,String ct,String buytype,String price){
				
		Member member = Blade.create(Member.class).findById(person_id);
		ProductSale ps = Blade.create(ProductSale.class).findById(psid);

		boolean isTask = CommKit.isTask(ps.getCode());		
		if(!isTask){
			return "2";
		}
		
		Product product = Blade.create(Product.class).findById(ps.getProduct_id()); 

		JSONObject obj = ProductCacheUtil.init(product.getCode()).get();
		String pprice = obj.getString("NewPrice");
		
		Order order = new Order();
		order.setOrder_num(Func.orderNo("B"));
		order.setPerson_id(member.getId());
		order.setPerson_name(member.getReal_name());
		order.setPerson_phone(member.getMobile());
		order.setPerson_tuijian(member.getAgent_name());
//		if(!Func.isEmpty(member.getParent_id())){
//			order.setPerson_tuijian(member.getParent_id().toString());	
//		}
		order.setProduct_id(product.getId());
		order.setProductsale_id(ps.getId());
		order.setProduct_name(product.getProduct_name());
		order.setCode(product.getCode());
		order.setCode_name(ps.getCode_name());
		order.setPer_price(ps.getPrice());		
		order.setEarn(BigDecimal.ZERO);
		order.setUp_earn(BigDecimal.ZERO);
		order.setLow_earn(BigDecimal.ZERO);
		order.setMin_point(ps.getDiancs());
		
		BigDecimal order_money = ps.getPrice().multiply(new BigDecimal(ct));
		if(order_money.floatValue()<=0){
			return "3";
		}
		
		order.setOrder_money(order_money);
		
		BigDecimal fee = ps.getFee().multiply(new BigDecimal(ct));
		if(fee.floatValue()<=0){
			return "3";
		}
		order.setFee(fee);
		
		BigDecimal total_money = order.getOrder_money().add(fee);
		order.setTotal_price(total_money);
		
		order.setBuy_time(new Date());
		order.setBuy_count(Integer.valueOf(ct));
		order.setBuy_type(Integer.valueOf(buytype));
		order.setStatus(1);
		order.setBuy_price(pprice);
		order.setIs_agent(member.getIs_agent());
		order.setYinkui(ps.getYinkui());
		
		BigDecimal remainAmount = member.getAmount().subtract(order.getTotal_price());
		if(remainAmount.floatValue()<0){
			return "1";
		}
		
		order.setPerson_money(remainAmount);
		int order_id = saveRtId(order);
		boolean rs = true;
		if(order_id==0){
			rs = false;
			throw new RuntimeException("新增订单失败");
		}
		order.setId(order_id);
		
		Financial financial = new Financial();
		financial.setFinancial_type(LfConstant.FINANCIAL_TYPE_ZC);
		financial.setOrderNo(order.getOrder_num());
		financial.setUser_id(member.getId());
		financial.setPhone(member.getMobile());
		financial.setUser_name(member.getReal_name());
		financial.setAmount(order.getOrder_money());
		financial.setCreate_time(new Date());
		financial.setDesc("购买产品："+order.getProduct_name());
		financial.setSource_type(LfConstant.Source.C.value);
		financial.setUser_amount(remainAmount);
		rs = Blade.create(Financial.class).save(financial);
		if(!rs){
			throw new RuntimeException("明细数据失败");
		}
		
		financial = new Financial();
		financial.setFinancial_type(LfConstant.FINANCIAL_TYPE_ZC);
		financial.setOrderNo(order.getOrder_num());
		financial.setUser_id(member.getId());
		financial.setPhone(member.getMobile());
		financial.setUser_name(member.getReal_name());
		financial.setAmount(order.getFee());
		financial.setCreate_time(new Date());
		financial.setDesc("购买产品手续费："+order.getProduct_name());
		financial.setSource_type(LfConstant.Source.D.value);
		financial.setUser_amount(remainAmount);
		rs = Blade.create(Financial.class).save(financial);
		if(!rs){
			throw new RuntimeException("明细数据失败");
		}
		
		Member p = new Member();
		p.setId(member.getId());
		p.setAmount(remainAmount);
		BigDecimal m_fee = member.getPoint().add(order.getFee());
		p.setPoint(m_fee);
		
		rs = Blade.create(Member.class).update(p);
		if(!rs){
			throw new RuntimeException("会员更新数据失败");
		}
		
		//定时平仓
		OrderCacheUtil.init().put(order);
		
		return "0";
	}
	
	public String updateOrder(String order_id){
	
		Order order = Blade.create(Order.class).findById(order_id);
		if(order.getStatus()==2){
			return "0";
		}
		
		JSONObject obj = ProductCacheUtil.init(order.getCode()).get();
		String pprice = obj.getString("NewPrice");
		
		return updateOrder(order_id,pprice,"会员平仓");
	}

	public String updateOrder(String order_id,String sale_price,String msg){
		
		Order order = Blade.create(Order.class).findById(order_id);
		if(order.getStatus()==2){
			return "0";
		}
		
		Member member = Blade.create(Member.class).findById(order.getPerson_id());
		
		order.setSale_price(sale_price);
		order.setSale_time(new Date());
		order.setStatus(2);
		BigDecimal earn = CommKit.getEarn(order);
		order.setEarn(earn);
		
		boolean rs = update(order);
		if(!rs){
			return "1";
		}
		
		BigDecimal amount = order.getOrder_money().add(earn);
		if(amount.floatValue()<0){
			amount = BigDecimal.ZERO;
		}
		Member m = new Member();
		m.setId(order.getPerson_id());
		
		BigDecimal pamount = member.getAmount().add(amount);
		m.setAmount(pamount);
		
		BigDecimal profi_loss = member.getProfi_loss().add(earn);
		m.setProfi_loss(profi_loss);
		
		rs = Blade.create(Member.class).update(m);
		if(!rs){
			throw new RuntimeException("会员更新数据失败");
		}
		
		Financial financial = new Financial();
		financial.setFinancial_type(LfConstant.FINANCIAL_TYPE_SR);
		financial.setOrderNo(order.getOrder_num());
		financial.setUser_id(member.getId());
		financial.setPhone(member.getMobile());
		financial.setUser_name(member.getReal_name());
		financial.setAmount(amount);
		financial.setCreate_time(new Date());
		financial.setDesc(msg+"："+order.getProduct_name());
		financial.setSource_type(LfConstant.Source.B.value);
		financial.setUser_amount(m.getAmount());
		rs = Blade.create(Financial.class).save(financial);
		if(!rs){
			throw new RuntimeException("明细数据失败");
		}
		
		OrderCacheUtil.init().remove(Integer.valueOf(order_id));
		return "0";
	}
}
