package com.lfgj.product.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.lfgj.product.model.Adjust;
import com.lfgj.product.model.DateAdjust;
import com.lfgj.product.model.Product;
import com.lfgj.product.model.ProductSale;
import com.lfgj.product.service.ProductService;
import com.lfgj.product.util.AdjustCacheUtil;
import com.lfgj.product.util.ProductListCacheUtil;
import com.lfgj.util.LfConstant;
import com.rrgy.common.vo.ShiroUser;
import com.rrgy.core.base.service.BaseService;
import com.rrgy.core.plugins.dao.Blade;
import com.rrgy.core.plugins.dao.Md;
import com.rrgy.core.shiro.ShiroKit;
import com.rrgy.core.toolbox.Paras;
import com.rrgy.core.toolbox.kit.DateKit;
import com.rrgy.core.toolbox.kit.DateTimeKit;
import com.rrgy.core.toolbox.support.DateTime;

/**
 * Generated by Blade.
 * 2017-09-09 11:53:09
 */
@Service
public class ProductServiceImpl extends BaseService<Product> implements ProductService{

	@Override
	public boolean updateStatus(String ids, Object status) {
		Paras paras = Paras.create().set("status", status).set("ids", ids.split(","));
		boolean temp = updateBy("status = #{status}", "id in (#{join(ids)})", paras);
		return temp;
	}

	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> findOne(Object id) {
		return Md.selectUnique("product.findOne", Paras.create().set("id", id), Map.class);
	}

	public boolean saveProduct(Product product){
		ShiroUser user = ShiroKit.getUser();
		Integer pid = Blade.create(Product.class).saveRtId(product);
		ProductSale productSale = new ProductSale();
		productSale.setCreate_time(new Date());
		productSale.setPrice(BigDecimal.ZERO);
		productSale.setFee(BigDecimal.ZERO);
		productSale.setYinkui(BigDecimal.ZERO);
		productSale.setDiancs(BigDecimal.ZERO);
		productSale.setAdjust(BigDecimal.ZERO);
		productSale.setSort(1);
		productSale.setCreator(Integer.valueOf(user.getId().toString()));
		productSale.setProduct_id(pid);
		return Blade.create(ProductSale.class).save(productSale);
	}
	
	public boolean saveAdjust(Product product){
		ShiroUser user = ShiroKit.getUser();		
		
		String date = DateTimeKit.offsiteDay(new Date(), -2).toString(DateKit.DATE_FORMATE);
		Paras para = Paras.create().set("date", date);
		Blade.create(Adjust.class).deleteBy(" end_time < #{date}", para);
		
		Adjust adjust = new Adjust();
		adjust.setStatus(0);
		adjust.setCode(product.getCode());
		adjust.setAdjust(product.getAdjust());		
		adjust.setEnd_time(new Date());
		adjust.setBei(product.getBei());
		adjust.setUser_id(Integer.valueOf(user.getId().toString()));
		boolean rs = Blade.create(Adjust.class).save(adjust);
		if(rs){
			AdjustCacheUtil.init(product.getCode()).put(adjust);
		}
		
		Product p = Blade.create(Product.class).findById(product.getId());
		int h = DateTimeKit.thisHour();
		Date now = new Date();
		if(h<LfConstant.hour){
			now = DateTimeKit.yesterday();
		}
		DateAdjust dateAdjust = updateDateAdjust(p.getCode(),p.getAdjust(),now);
		AdjustCacheUtil.init(product.getCode()+"_date").putMap(dateAdjust);
		return rs;
	}
	
	public void initDateAdjust(){
		String date = DateTimeKit.offsiteDay(new Date(), -30).toString(DateKit.DATE_FORMATE);
		Paras para = Paras.create().set("date", date);
		Blade.create(DateAdjust.class).deleteBy(" create_date < #{date}", para);
		
		Product p = new Product();
		p.setStatus(1);
		List<Product> ps = Blade.create(Product.class).findByTemplate(p);
		for(Product pt:ps){
			updateDateAdjust(pt.getCode(),pt.getAdjust(),new Date());		
		}	
		
		List<DateAdjust> das = Blade.create(DateAdjust.class).findAll();
		for(DateAdjust da:das){
			AdjustCacheUtil.init(da.getCode()+"_date").putMap(da);
		}
	}
	
	private DateAdjust updateDateAdjust(String code,BigDecimal adjust,Date date){
		Paras para = Paras.create().set("code", code);
		DateAdjust dateAdjust = Blade.create(DateAdjust.class).findFirstBy(" create_date like '"+DateKit.getDay(date)+"%' and code=#{code}",para);
		
		if(dateAdjust==null){
			dateAdjust = new DateAdjust();
			dateAdjust.setCreate_date(date);
			dateAdjust.setFirst(adjust);
			dateAdjust.setHigh(adjust);
			dateAdjust.setLow(adjust);
			dateAdjust.setLast(adjust);
			dateAdjust.setCode(code);
			Blade.create(DateAdjust.class).save(dateAdjust);
		}else{
			if(adjust.floatValue()>dateAdjust.getHigh().floatValue()){
				dateAdjust.setHigh(adjust);
			}
			if(adjust.floatValue()<dateAdjust.getLow().floatValue()){
				dateAdjust.setLow(adjust);
			}
			dateAdjust.setLast(adjust);
			Blade.create(DateAdjust.class).update(dateAdjust);
		}
		return dateAdjust;
	}
}
